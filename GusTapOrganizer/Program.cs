using System;
using System.IO;
using System.Runtime.InteropServices;
using System.Text;

namespace GusTapOrganizer
{
    class Program
    {
        [DllImport("kernel32.dll", CharSet = CharSet.Auto)]

        public static extern int GetShortPathName(
                   [MarshalAs(UnmanagedType.LPTStr)]
                   string path,
                   [MarshalAs(UnmanagedType.LPTStr)]
                   StringBuilder shortPath,
                   int shortPathLength
                   );

        /// <summary>
        /// GusTap SD organizer V1.0
        /// </summary>
        /// <param name="RootFolder">Path to the root folder to organize</param>
        /// <param name="SortFiles">If true the files found in the root folder will be organized in subdirectories</param>
        /// <param name="IndexFiles">If true an index file will be created in each folder where .tap files were found (enables long names in GusTap)</param>
        static void Main(string RootFolder, bool SortFiles = true, bool IndexFiles = true)
        {
            if (string.IsNullOrWhiteSpace(RootFolder))
            {
                System.CommandLine.DragonFruit.CommandLine.ExecuteAssembly(typeof(AutoGeneratedProgram).Assembly, new string[] { "--help" }, "");
                return;
            }

            if (!Directory.Exists(RootFolder))
            {
                Console.WriteLine("Root folder not found! Aborting...");
                return;
            }

            if (SortFiles)
            {
                Console.WriteLine("Starting sorting phase...");

                var files = Directory.GetFiles(RootFolder, "*.tap");

                if (files == null || files.Length == 0)
                {
                    Console.WriteLine("No .tap files found, sort phase finished...");
                }
                else
                {
                    Console.WriteLine($"Sorting {files.Length} files...");

                    foreach (var file in files)
                    {
                        string fileName = Path.GetFileNameWithoutExtension(file);

                        if (fileName.Length < 4)
                        {
                            Console.WriteLine("Found file with name shorter than 4 chars, ignoring...");
                            continue;
                        }

                        char[] invalidChars = Path.GetInvalidFileNameChars();

                        string sanitized = fileName.Replace(' ', '_');

                        foreach (var chr in invalidChars)
                            sanitized = sanitized.Replace(chr, '#');

                        string firstFolder = sanitized.Substring(0, 1);
                        string secondFolder = sanitized.Substring(0, 2);
                        string thirdFolder = sanitized.Substring(0, 4);
                        string finalFolder = Path.Combine(RootFolder, firstFolder, secondFolder, thirdFolder);

                        if (!Directory.Exists(finalFolder))
                            Directory.CreateDirectory(finalFolder);

                        string finalPath = Path.Combine(finalFolder, sanitized + ".tap");

                        Console.WriteLine($"Moving {fileName} to {firstFolder}/{secondFolder}/{thirdFolder}");

                        File.Move(file, finalPath);
                    }

                    Console.WriteLine("Sort phase finished.");
                }
            }

            if (IndexFiles)
            {
                Console.WriteLine("Starting indexing phase...");

                IndexFolder(RootFolder);

                Console.WriteLine("Indexing phase finished.");
            }

            Console.WriteLine("Finished, have a good day!");
        }

        private static void IndexFolder(string CurrentFolder)
        {
            var folders = Directory.GetDirectories(CurrentFolder);

            if (folders != null && folders.Length > 0)
            {
                foreach (var folder in folders)
                    IndexFolder(folder);
            }

            var files = Directory.GetFiles(CurrentFolder, "*.tap");

            if(files != null && files.Length > 0)
            {
                Console.WriteLine($"Indexing folder {CurrentFolder}...");

                using (var indexStream = File.CreateText(Path.Combine(CurrentFolder, "lnam.idx")))
                {
                    foreach (var file in files)
                    {
                        StringBuilder shortPathBuffer = new StringBuilder(512);
                        var result = GetShortPathName(file, shortPathBuffer, 512);

                        if (result < 1)
                            Console.Write($"Error retrieving sort file name for {Path.GetFileName(file)}...");
                        else
                        {
                            string shortfn = Path.GetFileName(shortPathBuffer.ToString());
                            string longfn = Path.GetFileName(file);
                            indexStream.WriteLine($"*{shortfn}:{longfn}?");
                        }
                    }
                }
            }

        }
    }
}
